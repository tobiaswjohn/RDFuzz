Found anomalies while testing file ../found_anomalies/el_reasoners/rdfuzz/test_run_2024_11_28_13_26/test_ontologies/test652.owl

Anomaly 1: Inference differentiation between HERMIT and OPENLLET:
	additional axioms HERMIT: [DataPropertyAssertion(<http://www.example.org/reasonerTester#dq> <http://www.example.org/reasonerTester#c> "s3"^^<internal:anonymous-constants>)]
	additional axioms OPENLLET: [DataPropertyAssertion(<http://www.example.org/reasonerTester#dq> <http://www.example.org/reasonerTester#c> "s3"^^rdfs:Literal)]


––––––––––––––––––––––––––––––––––––––––––––
–––––––––––    Ontology File    ––––––––––––
––––––––––––––––––––––––––––––––––––––––––––

Prefix(:=<http://www.example.org/reasonerTester#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)

Ontology (


Declaration(Class(:A))
Declaration(Class(:B))
Declaration(Class(:C))
Declaration(Class(:D))
Declaration(NamedIndividual(:a))
Declaration(NamedIndividual(:b))
Declaration(NamedIndividual(:c))
Declaration(NamedIndividual(:d))
Declaration(ObjectProperty(:psim))
Declaration(ObjectProperty(:qsim))
Declaration(ObjectProperty(:rsim))
Declaration(ObjectProperty(:ssim))
Declaration(ObjectProperty(:pnonsim))
Declaration(ObjectProperty(:qnonsim))
Declaration(ObjectProperty(:rnonsim))
Declaration(ObjectProperty(:snonsim))
Declaration(DataProperty(:dp))
Declaration(DataProperty(:dq))
Declaration(DataProperty(:dr))
Declaration(DataProperty(:ds))
Declaration(AnnotationProperty(:anp))
Declaration(AnnotationProperty(:anq))
Declaration(AnnotationProperty(:anr))
Declaration(AnnotationProperty(:ans))
Declaration(Datatype(:dta))
Declaration(Datatype(:dtb))
Declaration(Datatype(:dtc))


EquivalentClasses(Annotation( :ans :annotation2) Annotation( :anr :annotation4) Annotation( :anq :annotation3)  ObjectSomeValuesFrom(:psim ObjectHasValue(:snonsim :b)) :A ObjectHasSelf(:qsim) )

DatatypeDefinition(Annotation(Annotation( :anr :annotation1)  :anp :annotation1) Annotation( :anp :annotation3) Annotation( :anp :annotation3)  :dtc DataIntersectionOf(rdfs:Literal DataOneOf("s1"@no)  rdf:PlainLiteral ) )

DatatypeDefinition(Annotation(Annotation(Annotation(Annotation(Annotation(Annotation(Annotation( :anq :annotation2)  :anp :annotation2)  :ans :annotation2) Annotation(Annotation( :anq :annotation4)  :ans :annotation1)  :ans :annotation4)  :anq :annotation1)  :ans :annotation4) Annotation( :anr :annotation4) Annotation( :anr :annotation3)  :anr :annotation2)  :dta xsd:string)

EquivalentDataProperties(Annotation( :anr :annotation1)  :ds :dp :dr )

TransitiveObjectProperty(Annotation(Annotation(Annotation(Annotation(Annotation(Annotation( :anp :annotation4)  :anp :annotation4) Annotation( :anr :annotation4)  :ans :annotation3)  :ans :annotation2)  :anp :annotation3)  :anr :annotation3)  :qnonsim)

DataPropertyAssertion( :dq :c "s3"^^rdfs:Literal)

NegativeDataPropertyAssertion(Annotation( :anr :annotation3) Annotation( :anq :annotation4) Annotation(Annotation(Annotation( :anr :annotation4) Annotation( :anp :annotation1)  :anq :annotation2) Annotation( :ans :annotation2) Annotation( :anr :annotation2)  :anr :annotation1)  :dq :a "s4")

DataPropertyDomain(Annotation( :anp :annotation4) Annotation( :anp :annotation1)  :ds ObjectIntersectionOf(:C :D ))

FunctionalDataProperty( :ds)

ReflexiveObjectProperty( :rsim)

ObjectPropertyAssertion( :rnonsim :d :b)

DisjointClasses( DataSomeValuesFrom(:dq DataOneOf("s2"@fr) ) ObjectOneOf(:b) :B DataHasValue(:dq "s2"@de) ObjectSomeValuesFrom(:ssim ObjectHasValue(:pnonsim :b)) ObjectHasValue(:snonsim :b) ObjectSomeValuesFrom(:snonsim DataHasValue(:dp "s1")) ObjectSomeValuesFrom(:ssim :C) DataHasValue(:ds "s3") DataHasValue(:dq "s1") :C )

HasKey( DataHasValue(:dr "s2"@en) ( :rsim :qnonsim  ) ( ) )

ObjectPropertyRange(Annotation(Annotation(Annotation( :anq :annotation1)  :anr :annotation1)  :anq :annotation1)  :rsim ObjectSomeValuesFrom(:pnonsim ObjectHasSelf(:psim))) 
)
