Prefix(:=<http://www.example.org/reasonerTester#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)

Ontology (


Declaration(Class(:A))
Declaration(Class(:B))
Declaration(Class(:C))
Declaration(Class(:D))
Declaration(NamedIndividual(:a))
Declaration(NamedIndividual(:b))
Declaration(NamedIndividual(:c))
Declaration(NamedIndividual(:d))
Declaration(ObjectProperty(:psim))
Declaration(ObjectProperty(:qsim))
Declaration(ObjectProperty(:rsim))
Declaration(ObjectProperty(:ssim))
Declaration(ObjectProperty(:pnonsim))
Declaration(ObjectProperty(:qnonsim))
Declaration(ObjectProperty(:rnonsim))
Declaration(ObjectProperty(:snonsim))
Declaration(DataProperty(:dp))
Declaration(DataProperty(:dq))
Declaration(DataProperty(:dr))
Declaration(DataProperty(:ds))
Declaration(AnnotationProperty(:anp))
Declaration(AnnotationProperty(:anq))
Declaration(AnnotationProperty(:anr))
Declaration(AnnotationProperty(:ans))
Declaration(Datatype(:dta))
Declaration(Datatype(:dtb))
Declaration(Datatype(:dtc))


ObjectPropertyRange(Annotation(Annotation( :anp :annotation4) Annotation( :anp :annotation2)  :ans :annotation1) Annotation( :anr :annotation3) Annotation( :anq :annotation2)  :ssim DataSomeValuesFrom(:dr rdfs:Literal))

SubClassOf(Annotation( :anq :annotation1)  ObjectIntersectionOf(ObjectSomeValuesFrom(:snonsim ObjectHasSelf(:qsim)) DataHasValue(:dq "s2") ) ObjectHasValue(:pnonsim :d))

ObjectPropertyAssertion(Annotation( :anp :annotation2) Annotation(Annotation( :ans :annotation4) Annotation( :anp :annotation2) Annotation(Annotation( :anr :annotation3)  :ans :annotation1) Annotation( :anp :annotation1)  :anq :annotation3)  :psim :c :b)

DisjointClasses( :D ObjectOneOf(:a) :C :B :A :D DataSomeValuesFrom(:dp DataIntersectionOf(DataOneOf("s3"^^xsd:string)  rdf:PlainLiteral ) ) DataHasValue(:ds "s4"@no) DataHasValue(:dp "s1") :B DataHasValue(:dr "s1") )

ClassAssertion( ObjectSomeValuesFrom(:rnonsim ObjectHasValue(:qnonsim :d)) :d) 
)
