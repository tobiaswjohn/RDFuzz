Prefix(:=<http://www.example.org/reasonerTester#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)

Ontology (

Annotation(Annotation( :anr :annotation4) Annotation( :anq :annotation2) Annotation( :ans :annotation1)  :anp :annotation3) 
Declaration(Class(:A))
Declaration(Class(:B))
Declaration(Class(:C))
Declaration(Class(:D))
Declaration(NamedIndividual(:a))
Declaration(NamedIndividual(:b))
Declaration(NamedIndividual(:c))
Declaration(NamedIndividual(:d))
Declaration(ObjectProperty(:psim))
Declaration(ObjectProperty(:qsim))
Declaration(ObjectProperty(:rsim))
Declaration(ObjectProperty(:ssim))
Declaration(ObjectProperty(:pnonsim))
Declaration(ObjectProperty(:qnonsim))
Declaration(ObjectProperty(:rnonsim))
Declaration(ObjectProperty(:snonsim))
Declaration(DataProperty(:dp))
Declaration(DataProperty(:dq))
Declaration(DataProperty(:dr))
Declaration(DataProperty(:ds))
Declaration(AnnotationProperty(:anp))
Declaration(AnnotationProperty(:anq))
Declaration(AnnotationProperty(:anr))
Declaration(AnnotationProperty(:ans))
Declaration(Datatype(:dta))
Declaration(Datatype(:dtb))
Declaration(Datatype(:dtc))


ClassAssertion( ObjectOneOf(:d) :c)

DatatypeDefinition( :dtb DataOneOf("s1") )

DatatypeDefinition(Annotation( :anq :annotation4)  :dta xsd:string)

ObjectPropertyAssertion( :pnonsim :b :a)

EquivalentDataProperties( :ds :dp :dr )

DataPropertyDomain(Annotation(Annotation( :anr :annotation2)  :anr :annotation2) Annotation( :anr :annotation2)  :dq DataSomeValuesFrom(:ds DataIntersectionOf(rdfs:Literal rdf:PlainLiteral DataOneOf("s2"^^rdf:PlainLiteral)  ) ))

HasKey( ObjectIntersectionOf(DataHasValue(:dr "s3"@fr) ObjectHasSelf(:rsim) :A ) ( ) ( :dr :dp :dr  ) )

DisjointClasses( ObjectSomeValuesFrom(:rnonsim :B) ObjectHasValue(:psim :b) :D ObjectSomeValuesFrom(:snonsim ObjectHasValue(:qsim :d)) :C ObjectHasValue(:ssim :c) ObjectSomeValuesFrom(:rnonsim ObjectHasValue(:qnonsim :b)) DataHasValue(:dr "s4"@de) DataHasValue(:dq "s1"@en) DataHasValue(:ds "s1"@no) DataHasValue(:ds "s1"@fr) ) 
)
