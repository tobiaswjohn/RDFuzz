Prefix(:=<http://www.example.org/reasonerTester#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)

Ontology (


Declaration(Class(:A))
Declaration(Class(:B))
Declaration(Class(:C))
Declaration(Class(:D))
Declaration(NamedIndividual(:a))
Declaration(NamedIndividual(:b))
Declaration(NamedIndividual(:c))
Declaration(NamedIndividual(:d))
Declaration(ObjectProperty(:psim))
Declaration(ObjectProperty(:qsim))
Declaration(ObjectProperty(:rsim))
Declaration(ObjectProperty(:ssim))
Declaration(ObjectProperty(:pnonsim))
Declaration(ObjectProperty(:qnonsim))
Declaration(ObjectProperty(:rnonsim))
Declaration(ObjectProperty(:snonsim))
Declaration(DataProperty(:dp))
Declaration(DataProperty(:dq))
Declaration(DataProperty(:dr))
Declaration(DataProperty(:ds))
Declaration(AnnotationProperty(:anp))
Declaration(AnnotationProperty(:anq))
Declaration(AnnotationProperty(:anr))
Declaration(AnnotationProperty(:ans))
Declaration(Datatype(:dta))
Declaration(Datatype(:dtb))
Declaration(Datatype(:dtc))


EquivalentObjectProperties(Annotation( :anp :annotation1) Annotation(Annotation( :ans :annotation2)  :anr :annotation3) Annotation( :anq :annotation1) Annotation( :anp :annotation4)  :rsim :qnonsim )

ReflexiveObjectProperty( :ssim)

DisjointClasses(Annotation( :anp :annotation4)  ObjectIntersectionOf(ObjectSomeValuesFrom(:snonsim DataSomeValuesFrom(:ds DataOneOf("s1") )) ObjectHasValue(:pnonsim :c) DataHasValue(:dp "s2"@fr) ObjectHasSelf(:qsim) ObjectOneOf(:b) :A :D ObjectOneOf(:d) :C :C DataSomeValuesFrom(:dr rdfs:Literal) ObjectOneOf(:a) DataHasValue(:dq "s3"^^rdf:PlainLiteral) DataSomeValuesFrom(:dr DataIntersectionOf(xsd:string DataIntersectionOf(rdf:PlainLiteral rdf:PlainLiteral )  ) ) ObjectSomeValuesFrom(:psim :D) ObjectHasValue(:rnonsim :a) :C ObjectHasValue(:pnonsim :d) :C ) :B )

FunctionalDataProperty( :ds)

ObjectPropertyAssertion( :rsim :c :a) 
)
