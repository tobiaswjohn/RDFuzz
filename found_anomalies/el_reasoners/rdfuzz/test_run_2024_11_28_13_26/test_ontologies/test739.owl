Prefix(:=<http://www.example.org/reasonerTester#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)

Ontology (

Annotation(Annotation(Annotation( :anp :annotation4) Annotation( :anp :annotation3)  :anr :annotation1) Annotation(Annotation( :anp :annotation1)  :anq :annotation2) Annotation( :anp :annotation3)  :ans :annotation3) 
Declaration(Class(:A))
Declaration(Class(:B))
Declaration(Class(:C))
Declaration(Class(:D))
Declaration(NamedIndividual(:a))
Declaration(NamedIndividual(:b))
Declaration(NamedIndividual(:c))
Declaration(NamedIndividual(:d))
Declaration(ObjectProperty(:psim))
Declaration(ObjectProperty(:qsim))
Declaration(ObjectProperty(:rsim))
Declaration(ObjectProperty(:ssim))
Declaration(ObjectProperty(:pnonsim))
Declaration(ObjectProperty(:qnonsim))
Declaration(ObjectProperty(:rnonsim))
Declaration(ObjectProperty(:snonsim))
Declaration(DataProperty(:dp))
Declaration(DataProperty(:dq))
Declaration(DataProperty(:dr))
Declaration(DataProperty(:ds))
Declaration(AnnotationProperty(:anp))
Declaration(AnnotationProperty(:anq))
Declaration(AnnotationProperty(:anr))
Declaration(AnnotationProperty(:ans))
Declaration(Datatype(:dta))
Declaration(Datatype(:dtb))
Declaration(Datatype(:dtc))


EquivalentClasses(Annotation( :anp :annotation3) Annotation(Annotation( :anp :annotation3) Annotation( :anq :annotation4)  :anp :annotation4) Annotation( :anq :annotation1) Annotation(Annotation( :anp :annotation2) Annotation( :ans :annotation1) Annotation( :anp :annotation4)  :anq :annotation3)  ObjectOneOf(:c) DataSomeValuesFrom(:dr DataOneOf("s2"@en) ) ObjectSomeValuesFrom(:psim :B) )

SubClassOf( ObjectIntersectionOf(:A ObjectHasValue(:rnonsim :b) ObjectHasSelf(:rsim) :C :D :A DataSomeValuesFrom(:dp DataIntersectionOf(rdf:PlainLiteral rdfs:Literal DataOneOf("s4")  ) ) ObjectHasValue(:pnonsim :d) DataHasValue(:ds "s1") ObjectOneOf(:a) ObjectSomeValuesFrom(:qsim ObjectSomeValuesFrom(:qnonsim :C)) ObjectHasValue(:snonsim :b) ObjectHasValue(:rnonsim :a) ObjectSomeValuesFrom(:ssim :B) :C ) DataHasValue(:dq "s3"^^xsd:string))

HasKey( DataHasValue(:dr "s3"@no) ( :psim  ) ( ) )

ObjectPropertyDomain(Annotation( :ans :annotation4)  :pnonsim DataHasValue(:dp "s4"@fr))

NegativeDataPropertyAssertion(Annotation( :anr :annotation4)  :dr :a "s4"@de)

DisjointClasses( ObjectHasValue(:rnonsim :c) ObjectIntersectionOf(ObjectIntersectionOf(:B :B ) ObjectHasSelf(:ssim) ObjectOneOf(:b) :B ) ObjectIntersectionOf(DataSomeValuesFrom(:dp rdfs:Literal) DataSomeValuesFrom(:dq DataOneOf("s3"@no) ) ) )

NegativeObjectPropertyAssertion(Annotation(Annotation( :anq :annotation3)  :anr :annotation2)  :psim :a :d)

DisjointClasses( ObjectHasSelf(:rsim) :B )

DisjointClasses( DataSomeValuesFrom(:dp rdfs:Literal) ObjectHasValue(:snonsim :a) ObjectHasSelf(:ssim) ObjectHasValue(:rnonsim :d) DataHasValue(:dp "s3"^^rdfs:Literal) )

TransitiveObjectProperty(Annotation(Annotation( :ans :annotation1)  :anr :annotation3) Annotation( :ans :annotation3)  :snonsim)

SubClassOf(Annotation(Annotation(Annotation( :anq :annotation4)  :anr :annotation1) Annotation(Annotation( :anq :annotation2)  :anq :annotation2) Annotation(Annotation( :anp :annotation3)  :anp :annotation4)  :anp :annotation1)  ObjectHasValue(:rsim :c) ObjectHasValue(:qsim :c))

ObjectPropertyAssertion( :qsim :c :c)

EquivalentObjectProperties( :rnonsim :snonsim :ssim )

HasKey( DataSomeValuesFrom(:ds rdfs:Literal) ( :qsim :qsim :psim  ) ( :dq  ) )

ReflexiveObjectProperty(Annotation(Annotation( :ans :annotation2) Annotation( :ans :annotation2) Annotation( :anp :annotation3)  :anr :annotation4)  :rsim)

DatatypeDefinition( :dtb DataIntersectionOf(DataOneOf("s4"@no)  DataOneOf("s4")  ) )

SubClassOf( ObjectHasSelf(:psim) :C)

DataPropertyAssertion(Annotation( :ans :annotation3) Annotation( :anr :annotation1)  :ds :c "s4")

FunctionalDataProperty( :dq)

ClassAssertion( :B :c)

ObjectPropertyRange( :qnonsim :A)

DifferentIndividuals( :c :a )

HasKey( :A ( ) ( :dq  ) ) 
)
