Prefix(:=<http://www.example.org/reasonerTester#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)

Ontology (

Annotation(Annotation(Annotation( :anq :annotation4)  :anq :annotation2) Annotation( :anr :annotation3) Annotation( :ans :annotation2)  :anp :annotation1) 
Declaration(Class(:A))
Declaration(Class(:B))
Declaration(Class(:C))
Declaration(Class(:D))
Declaration(NamedIndividual(:a))
Declaration(NamedIndividual(:b))
Declaration(NamedIndividual(:c))
Declaration(NamedIndividual(:d))
Declaration(ObjectProperty(:psim))
Declaration(ObjectProperty(:qsim))
Declaration(ObjectProperty(:rsim))
Declaration(ObjectProperty(:ssim))
Declaration(ObjectProperty(:pnonsim))
Declaration(ObjectProperty(:qnonsim))
Declaration(ObjectProperty(:rnonsim))
Declaration(ObjectProperty(:snonsim))
Declaration(DataProperty(:dp))
Declaration(DataProperty(:dq))
Declaration(DataProperty(:dr))
Declaration(DataProperty(:ds))
Declaration(AnnotationProperty(:anp))
Declaration(AnnotationProperty(:anq))
Declaration(AnnotationProperty(:anr))
Declaration(AnnotationProperty(:ans))
Declaration(Datatype(:dta))
Declaration(Datatype(:dtb))
Declaration(Datatype(:dtc))


SubDataPropertyOf( :dp :dq)

NegativeObjectPropertyAssertion( :rsim :b :c)

SubClassOf( ObjectHasValue(:pnonsim :a) ObjectSomeValuesFrom(:ssim DataSomeValuesFrom(:dr rdfs:Literal)))

ObjectPropertyAssertion( :qnonsim :b :d)

DisjointClasses( ObjectIntersectionOf(DataHasValue(:ds "s3"@fr) ObjectOneOf(:d) :B :D :A :C :B DataHasValue(:ds "s1"^^rdf:PlainLiteral) DataSomeValuesFrom(:dq DataOneOf("s4") ) DataHasValue(:dp "s2"@no) DataSomeValuesFrom(:dq DataIntersectionOf(DataIntersectionOf(DataIntersectionOf(rdf:PlainLiteral rdf:PlainLiteral )  rdf:PlainLiteral )  xsd:string ) ) DataSomeValuesFrom(:dr DataIntersectionOf(xsd:string rdfs:Literal ) ) ObjectSomeValuesFrom(:snonsim :D) :D ) ObjectHasSelf(:qsim) ) 
)
