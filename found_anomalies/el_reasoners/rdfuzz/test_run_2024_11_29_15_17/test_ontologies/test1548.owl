Prefix(:=<http://www.example.org/reasonerTester#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)

Ontology (

Annotation(Annotation(Annotation( :ans :annotation3)  :anq :annotation1) Annotation( :anp :annotation4) Annotation( :anr :annotation2)  :anp :annotation4) 
Declaration(Class(:A))
Declaration(Class(:B))
Declaration(Class(:C))
Declaration(Class(:D))
Declaration(NamedIndividual(:a))
Declaration(NamedIndividual(:b))
Declaration(NamedIndividual(:c))
Declaration(NamedIndividual(:d))
Declaration(ObjectProperty(:psim))
Declaration(ObjectProperty(:qsim))
Declaration(ObjectProperty(:rsim))
Declaration(ObjectProperty(:ssim))
Declaration(ObjectProperty(:pnonsim))
Declaration(ObjectProperty(:qnonsim))
Declaration(ObjectProperty(:rnonsim))
Declaration(ObjectProperty(:snonsim))
Declaration(DataProperty(:dp))
Declaration(DataProperty(:dq))
Declaration(DataProperty(:dr))
Declaration(DataProperty(:ds))
Declaration(AnnotationProperty(:anp))
Declaration(AnnotationProperty(:anq))
Declaration(AnnotationProperty(:anr))
Declaration(AnnotationProperty(:ans))
Declaration(Datatype(:dta))
Declaration(Datatype(:dtb))
Declaration(Datatype(:dtc))


DisjointClasses( ObjectHasValue(:qnonsim :c) ObjectIntersectionOf(ObjectHasSelf(:qsim) :D DataHasValue(:dq "s2"@de) ObjectSomeValuesFrom(:psim :B) ObjectOneOf(:b) :A :C ObjectHasValue(:pnonsim :a) DataSomeValuesFrom(:dp DataIntersectionOf(DataOneOf("s3")  rdfs:Literal rdf:PlainLiteral ) ) DataHasValue(:ds "s4"^^rdfs:Literal) ObjectHasValue(:snonsim :d) ObjectHasValue(:rsim :b) ObjectSomeValuesFrom(:ssim ObjectSomeValuesFrom(:rnonsim DataHasValue(:ds "s1"@fr))) ObjectHasValue(:rsim :a) ObjectSomeValuesFrom(:rsim DataHasValue(:ds "s2"@no)) ObjectHasValue(:pnonsim :a) DataHasValue(:dr "s4"@en) DataHasValue(:ds "s3"@en) :D ) DataSomeValuesFrom(:dr xsd:string) )

NegativeObjectPropertyAssertion( :snonsim :c :b)

ObjectPropertyAssertion( :ssim :b :d)

ClassAssertion( :D :d)

TransitiveObjectProperty( :rnonsim)

HasKey( :C ( ) ( :dq  ) )

FunctionalDataProperty( :dp)

EquivalentClasses( :D :C )

DatatypeDefinition( :dta rdfs:Literal)

FunctionalDataProperty( :ds)

ReflexiveObjectProperty( :ssim) 
)
