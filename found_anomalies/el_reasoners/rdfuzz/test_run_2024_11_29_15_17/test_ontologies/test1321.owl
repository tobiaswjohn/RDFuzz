Prefix(:=<http://www.example.org/reasonerTester#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)

Ontology (

Annotation(Annotation(Annotation( :ans :annotation1) Annotation( :anq :annotation3)  :ans :annotation4) Annotation( :anp :annotation1) Annotation( :anr :annotation3)  :anq :annotation2) 
Declaration(Class(:A))
Declaration(Class(:B))
Declaration(Class(:C))
Declaration(Class(:D))
Declaration(NamedIndividual(:a))
Declaration(NamedIndividual(:b))
Declaration(NamedIndividual(:c))
Declaration(NamedIndividual(:d))
Declaration(ObjectProperty(:psim))
Declaration(ObjectProperty(:qsim))
Declaration(ObjectProperty(:rsim))
Declaration(ObjectProperty(:ssim))
Declaration(ObjectProperty(:pnonsim))
Declaration(ObjectProperty(:qnonsim))
Declaration(ObjectProperty(:rnonsim))
Declaration(ObjectProperty(:snonsim))
Declaration(DataProperty(:dp))
Declaration(DataProperty(:dq))
Declaration(DataProperty(:dr))
Declaration(DataProperty(:ds))
Declaration(AnnotationProperty(:anp))
Declaration(AnnotationProperty(:anq))
Declaration(AnnotationProperty(:anr))
Declaration(AnnotationProperty(:ans))
Declaration(Datatype(:dta))
Declaration(Datatype(:dtb))
Declaration(Datatype(:dtc))


TransitiveObjectProperty( :pnonsim)

ObjectPropertyAssertion(Annotation( :ans :annotation2)  :qsim :a :d)

EquivalentClasses(Annotation( :anr :annotation3) Annotation( :anr :annotation3) Annotation( :anp :annotation3)  DataSomeValuesFrom(:dr xsd:string) ObjectIntersectionOf(ObjectHasValue(:qnonsim :c) :D ) )

DisjointClasses( ObjectHasSelf(:ssim) ObjectOneOf(:b) DataHasValue(:ds "s3"^^rdfs:Literal) ObjectSomeValuesFrom(:snonsim :B) :C :A :C :A DataSomeValuesFrom(:dp DataIntersectionOf(rdf:PlainLiteral DataOneOf("s4")  ) ) DataHasValue(:dq "s2"@de) DataHasValue(:ds "s1") ObjectHasValue(:rsim :c) ObjectHasValue(:rnonsim :d) ObjectSomeValuesFrom(:psim ObjectSomeValuesFrom(:ssim DataHasValue(:dp "s1"@en))) ObjectHasValue(:qsim :d) ObjectHasValue(:rsim :b) ObjectSomeValuesFrom(:pnonsim DataHasValue(:dp "s1"@no)) DataHasValue(:ds "s2"@fr) :C :C :A )

SubClassOf(Annotation( :anq :annotation1) Annotation( :anq :annotation4)  DataSomeValuesFrom(:dr xsd:string) DataSomeValuesFrom(:dq rdfs:Literal)) 
)
