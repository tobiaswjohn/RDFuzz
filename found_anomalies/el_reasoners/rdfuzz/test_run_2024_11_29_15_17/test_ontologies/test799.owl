Prefix(:=<http://www.example.org/reasonerTester#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)

Ontology (


Declaration(Class(:A))
Declaration(Class(:B))
Declaration(Class(:C))
Declaration(Class(:D))
Declaration(NamedIndividual(:a))
Declaration(NamedIndividual(:b))
Declaration(NamedIndividual(:c))
Declaration(NamedIndividual(:d))
Declaration(ObjectProperty(:psim))
Declaration(ObjectProperty(:qsim))
Declaration(ObjectProperty(:rsim))
Declaration(ObjectProperty(:ssim))
Declaration(ObjectProperty(:pnonsim))
Declaration(ObjectProperty(:qnonsim))
Declaration(ObjectProperty(:rnonsim))
Declaration(ObjectProperty(:snonsim))
Declaration(DataProperty(:dp))
Declaration(DataProperty(:dq))
Declaration(DataProperty(:dr))
Declaration(DataProperty(:ds))
Declaration(AnnotationProperty(:anp))
Declaration(AnnotationProperty(:anq))
Declaration(AnnotationProperty(:anr))
Declaration(AnnotationProperty(:ans))
Declaration(Datatype(:dta))
Declaration(Datatype(:dtb))
Declaration(Datatype(:dtc))


ObjectPropertyAssertion(Annotation(Annotation( :anr :annotation1) Annotation( :anq :annotation3)  :ans :annotation4) Annotation( :anp :annotation2) Annotation( :anq :annotation2)  :psim :a :c)

ClassAssertion(Annotation(Annotation( :anp :annotation1)  :anq :annotation1)  ObjectIntersectionOf(ObjectSomeValuesFrom(:qnonsim DataHasValue(:dp "s3"@en)) :A ) :b)

DisjointClasses( DataSomeValuesFrom(:ds rdf:PlainLiteral) ObjectHasSelf(:ssim) ObjectOneOf(:d) ObjectHasValue(:rsim :c) :C :B :D :D DataSomeValuesFrom(:dq DataOneOf("s1"^^rdfs:Literal) ) DataHasValue(:dr "s2") DataHasValue(:ds "s4") DataSomeValuesFrom(:ds DataIntersectionOf(DataIntersectionOf(rdfs:Literal rdfs:Literal )  xsd:string xsd:string ) ) ObjectHasValue(:snonsim :a) ObjectHasValue(:rnonsim :b) :B )

TransitiveObjectProperty( :pnonsim)

HasKey( :A ( ) ( :dq  ) )

FunctionalDataProperty( :dr)

DatatypeDefinition( :dtb xsd:string)

SameIndividual( :d :d ) 
)
