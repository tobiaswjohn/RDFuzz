Prefix(:=<http://www.example.org/reasonerTester#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)

Ontology (

Annotation(Annotation( :anq :annotation2) Annotation( :ans :annotation1) Annotation( :anp :annotation4)  :anr :annotation3) 
Declaration(Class(:A))
Declaration(Class(:B))
Declaration(Class(:C))
Declaration(Class(:D))
Declaration(NamedIndividual(:a))
Declaration(NamedIndividual(:b))
Declaration(NamedIndividual(:c))
Declaration(NamedIndividual(:d))
Declaration(ObjectProperty(:psim))
Declaration(ObjectProperty(:qsim))
Declaration(ObjectProperty(:rsim))
Declaration(ObjectProperty(:ssim))
Declaration(ObjectProperty(:pnonsim))
Declaration(ObjectProperty(:qnonsim))
Declaration(ObjectProperty(:rnonsim))
Declaration(ObjectProperty(:snonsim))
Declaration(DataProperty(:dp))
Declaration(DataProperty(:dq))
Declaration(DataProperty(:dr))
Declaration(DataProperty(:ds))
Declaration(AnnotationProperty(:anp))
Declaration(AnnotationProperty(:anq))
Declaration(AnnotationProperty(:anr))
Declaration(AnnotationProperty(:ans))
Declaration(Datatype(:dta))
Declaration(Datatype(:dtb))
Declaration(Datatype(:dtc))


ObjectPropertyAssertion( :psim :a :b)

ReflexiveObjectProperty( :pnonsim)

NegativeObjectPropertyAssertion( :snonsim :c :d)

DatatypeDefinition(Annotation(Annotation(Annotation( :anp :annotation4)  :ans :annotation1) Annotation( :anq :annotation2)  :anq :annotation1) Annotation(Annotation( :anq :annotation1)  :anr :annotation1)  :dtb DataIntersectionOf(DataOneOf("s3"^^rdf:PlainLiteral)  xsd:string ) )

DatatypeDefinition( :dta rdfs:Literal)

EquivalentClasses(Annotation( :ans :annotation1)  ObjectOneOf(:a) ObjectHasValue(:rsim :a) DataHasValue(:ds "s4"@en) )

TransitiveObjectProperty(Annotation( :anq :annotation2) Annotation( :ans :annotation4) Annotation( :anq :annotation4) Annotation( :anq :annotation3)  :qnonsim)

DataPropertyDomain( :dp ObjectIntersectionOf(:A DataSomeValuesFrom(:dr DataIntersectionOf(DataOneOf("s2")  DataIntersectionOf(xsd:string rdf:PlainLiteral )  DataOneOf("s2")  rdf:PlainLiteral ) ) ObjectHasSelf(:ssim) ObjectSomeValuesFrom(:qsim :B) :C :D DataHasValue(:dq "s1") DataHasValue(:dr "s2") )) 
)
