Prefix(:=<http://www.example.org/reasonerTester#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)

Ontology (


Declaration(Class(:A))
Declaration(Class(:B))
Declaration(Class(:C))
Declaration(Class(:D))
Declaration(NamedIndividual(:a))
Declaration(NamedIndividual(:b))
Declaration(NamedIndividual(:c))
Declaration(NamedIndividual(:d))
Declaration(ObjectProperty(:psim))
Declaration(ObjectProperty(:qsim))
Declaration(ObjectProperty(:rsim))
Declaration(ObjectProperty(:ssim))
Declaration(ObjectProperty(:pnonsim))
Declaration(ObjectProperty(:qnonsim))
Declaration(ObjectProperty(:rnonsim))
Declaration(ObjectProperty(:snonsim))
Declaration(DataProperty(:dp))
Declaration(DataProperty(:dq))
Declaration(DataProperty(:dr))
Declaration(DataProperty(:ds))
Declaration(AnnotationProperty(:anp))
Declaration(AnnotationProperty(:anq))
Declaration(AnnotationProperty(:anr))
Declaration(AnnotationProperty(:ans))
Declaration(Datatype(:dta))
Declaration(Datatype(:dtb))
Declaration(Datatype(:dtc))


DatatypeDefinition(Annotation(Annotation( :anq :annotation4) Annotation( :anp :annotation1)  :anr :annotation2) Annotation( :ans :annotation3)  :dtb xsd:string)

SubClassOf(Annotation(Annotation( :ans :annotation2)  :anq :annotation1)  ObjectOneOf(:d) ObjectIntersectionOf(ObjectSomeValuesFrom(:snonsim :C) ObjectHasValue(:ssim :c) :D ))

DatatypeDefinition( :dta DataOneOf("s1"^^rdfs:Literal) )

EquivalentDataProperties( :ds :dr :dq )

DisjointClasses( DataHasValue(:dp "s3") DataSomeValuesFrom(:ds DataIntersectionOf(rdfs:Literal rdf:PlainLiteral rdf:PlainLiteral ) ) ObjectHasSelf(:qsim) :B :A ObjectHasValue(:pnonsim :b) ObjectHasValue(:rsim :a) ObjectOneOf(:a) DataHasValue(:dr "s2"@de) DataHasValue(:dr "s4"@en) ObjectSomeValuesFrom(:rnonsim ObjectHasValue(:qnonsim :b)) ObjectHasValue(:psim :b) ObjectHasValue(:ssim :d) ObjectHasValue(:snonsim :d) DataHasValue(:dp "s2"@no) DataHasValue(:ds "s1"@fr) DataHasValue(:dr "s2"@de) DataHasValue(:ds "s2"^^rdfs:Literal) :C )

EquivalentClasses( DataHasValue(:dr "s1") DataSomeValuesFrom(:dq DataOneOf("s1"^^rdf:PlainLiteral) ) :A )

ObjectPropertyAssertion( :qnonsim :a :b)

DatatypeDefinition( :dtc xsd:string) 
)
