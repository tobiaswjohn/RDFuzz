Prefix(:=<http://www.example.org/reasonerTester#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)

Ontology (

Annotation(Annotation(Annotation( :anr :annotation1)  :anp :annotation2) Annotation( :ans :annotation3) Annotation( :anq :annotation4) Annotation( :anp :annotation4)  :anr :annotation4) 
Declaration(Class(:A))
Declaration(Class(:B))
Declaration(Class(:C))
Declaration(Class(:D))
Declaration(NamedIndividual(:a))
Declaration(NamedIndividual(:b))
Declaration(NamedIndividual(:c))
Declaration(NamedIndividual(:d))
Declaration(ObjectProperty(:psim))
Declaration(ObjectProperty(:qsim))
Declaration(ObjectProperty(:rsim))
Declaration(ObjectProperty(:ssim))
Declaration(ObjectProperty(:pnonsim))
Declaration(ObjectProperty(:qnonsim))
Declaration(ObjectProperty(:rnonsim))
Declaration(ObjectProperty(:snonsim))
Declaration(DataProperty(:dp))
Declaration(DataProperty(:dq))
Declaration(DataProperty(:dr))
Declaration(DataProperty(:ds))
Declaration(AnnotationProperty(:anp))
Declaration(AnnotationProperty(:anq))
Declaration(AnnotationProperty(:anr))
Declaration(AnnotationProperty(:ans))
Declaration(Datatype(:dta))
Declaration(Datatype(:dtb))
Declaration(Datatype(:dtc))


ReflexiveObjectProperty(Annotation( :anp :annotation4)  :psim)

ObjectPropertyDomain( :qnonsim :C)

ObjectPropertyRange(Annotation( :ans :annotation3)  :rnonsim DataHasValue(:dq "s1"^^rdf:PlainLiteral))

DisjointClasses( DataSomeValuesFrom(:dp DataIntersectionOf(xsd:string DataOneOf("s4")  rdfs:Literal ) ) ObjectHasValue(:qsim :c) ObjectSomeValuesFrom(:ssim ObjectOneOf(:a)) )

HasKey(Annotation( :anp :annotation1) Annotation( :anp :annotation2) Annotation( :ans :annotation2)  ObjectIntersectionOf(ObjectHasSelf(:rsim) :B :A :D ) ( ) ( :dr  ) )

ObjectPropertyAssertion( :snonsim :b :d)

SubClassOf( DataHasValue(:ds "s2"@de) DataHasValue(:ds "s3"@en))

HasKey( ObjectSomeValuesFrom(:psim DataHasValue(:dq "s2"@no)) ( :pnonsim :snonsim  ) ( :dp :ds :dr  ) ) 
)
