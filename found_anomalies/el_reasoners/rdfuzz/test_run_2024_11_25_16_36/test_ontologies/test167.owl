Prefix(:=<http://www.example.org/reasonerTester#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)

Ontology (

Annotation(Annotation(Annotation( :ans :annotation2)  :anr :annotation1) Annotation( :anp :annotation3) Annotation( :anp :annotation4)  :anq :annotation4) 
Declaration(Class(:A))
Declaration(Class(:B))
Declaration(Class(:C))
Declaration(Class(:D))
Declaration(NamedIndividual(:a))
Declaration(NamedIndividual(:b))
Declaration(NamedIndividual(:c))
Declaration(NamedIndividual(:d))
Declaration(ObjectProperty(:psim))
Declaration(ObjectProperty(:qsim))
Declaration(ObjectProperty(:rsim))
Declaration(ObjectProperty(:ssim))
Declaration(ObjectProperty(:pnonsim))
Declaration(ObjectProperty(:qnonsim))
Declaration(ObjectProperty(:rnonsim))
Declaration(ObjectProperty(:snonsim))
Declaration(DataProperty(:dp))
Declaration(DataProperty(:dq))
Declaration(DataProperty(:dr))
Declaration(DataProperty(:ds))
Declaration(AnnotationProperty(:anp))
Declaration(AnnotationProperty(:anq))
Declaration(AnnotationProperty(:anr))
Declaration(AnnotationProperty(:ans))
Declaration(Datatype(:dta))
Declaration(Datatype(:dtb))
Declaration(Datatype(:dtc))


NegativeDataPropertyAssertion( :dq :b "s2"^^rdfs:Literal)

SameIndividual(Annotation( :anp :annotation2)  :c :d )

ObjectPropertyAssertion( :ssim :a :c)

DataPropertyRange( :ds DataIntersectionOf(rdf:PlainLiteral DataOneOf("s3")  xsd:string ) )

ObjectPropertyRange( :snonsim DataSomeValuesFrom(:dp DataOneOf("s1") ))

ClassAssertion(Annotation( :ans :annotation3)  ObjectSomeValuesFrom(:pnonsim ObjectHasValue(:rsim :b)) :d)

HasKey(Annotation( :ans :annotation1) Annotation(Annotation( :ans :annotation1) Annotation( :anr :annotation4) Annotation( :anq :annotation2)  :anr :annotation2)  ObjectOneOf(:c) ( :qsim  ) ( ) )

EquivalentClasses( :A ObjectIntersectionOf(ObjectHasSelf(:psim) DataHasValue(:dr "s4") :B :D :C ObjectSomeValuesFrom(:rnonsim ObjectHasValue(:qnonsim :d)) ObjectSomeValuesFrom(:snonsim ObjectSomeValuesFrom(:snonsim :B)) ObjectHasValue(:pnonsim :b) ObjectIntersectionOf(ObjectSomeValuesFrom(:rnonsim ObjectSomeValuesFrom(:psim :A)) ObjectHasSelf(:qsim) ) ) ) 
)
