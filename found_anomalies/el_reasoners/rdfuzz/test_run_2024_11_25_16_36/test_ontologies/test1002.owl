Prefix(:=<http://www.example.org/reasonerTester#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)

Ontology (

Annotation(Annotation(Annotation( :anr :annotation4)  :anq :annotation3) Annotation( :ans :annotation2) Annotation( :anp :annotation3) Annotation( :anp :annotation4)  :anp :annotation1) 
Declaration(Class(:A))
Declaration(Class(:B))
Declaration(Class(:C))
Declaration(Class(:D))
Declaration(NamedIndividual(:a))
Declaration(NamedIndividual(:b))
Declaration(NamedIndividual(:c))
Declaration(NamedIndividual(:d))
Declaration(ObjectProperty(:psim))
Declaration(ObjectProperty(:qsim))
Declaration(ObjectProperty(:rsim))
Declaration(ObjectProperty(:ssim))
Declaration(ObjectProperty(:pnonsim))
Declaration(ObjectProperty(:qnonsim))
Declaration(ObjectProperty(:rnonsim))
Declaration(ObjectProperty(:snonsim))
Declaration(DataProperty(:dp))
Declaration(DataProperty(:dq))
Declaration(DataProperty(:dr))
Declaration(DataProperty(:ds))
Declaration(AnnotationProperty(:anp))
Declaration(AnnotationProperty(:anq))
Declaration(AnnotationProperty(:anr))
Declaration(AnnotationProperty(:ans))
Declaration(Datatype(:dta))
Declaration(Datatype(:dtb))
Declaration(Datatype(:dtc))


SubClassOf( ObjectIntersectionOf(DataHasValue(:dq "s4"^^rdf:PlainLiteral) DataSomeValuesFrom(:dr DataIntersectionOf(DataOneOf("s2")  xsd:string DataOneOf("s3")  ) ) ) :C)

ObjectPropertyAssertion(Annotation(Annotation(Annotation(Annotation( :anq :annotation4)  :anp :annotation1) Annotation( :anq :annotation1) Annotation(Annotation(Annotation( :ans :annotation2) Annotation( :ans :annotation4)  :anq :annotation2) Annotation(Annotation(Annotation( :anr :annotation1)  :anp :annotation1) Annotation( :ans :annotation1)  :anq :annotation3)  :anr :annotation1)  :anq :annotation2)  :ans :annotation3) Annotation( :ans :annotation4)  :qsim :a :d)

NegativeDataPropertyAssertion( :dp :c "s1")

NegativeObjectPropertyAssertion( :qnonsim :b :a)

DisjointClasses( :A :B )

ReflexiveObjectProperty( :rnonsim)

FunctionalDataProperty( :ds)

HasKey( :D ( ) ( :dr  ) ) 
)
