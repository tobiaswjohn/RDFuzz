Prefix(:=<http://www.example.org/reasonerTester#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)

Ontology (

Annotation(Annotation(Annotation( :ans :annotation1)  :anq :annotation3) Annotation( :anp :annotation2) Annotation( :anp :annotation1)  :anr :annotation4) 
Declaration(Class(:A))
Declaration(Class(:B))
Declaration(Class(:C))
Declaration(Class(:D))
Declaration(NamedIndividual(:a))
Declaration(NamedIndividual(:b))
Declaration(NamedIndividual(:c))
Declaration(NamedIndividual(:d))
Declaration(ObjectProperty(:psim))
Declaration(ObjectProperty(:qsim))
Declaration(ObjectProperty(:rsim))
Declaration(ObjectProperty(:ssim))
Declaration(ObjectProperty(:pnonsim))
Declaration(ObjectProperty(:qnonsim))
Declaration(ObjectProperty(:rnonsim))
Declaration(ObjectProperty(:snonsim))
Declaration(DataProperty(:dp))
Declaration(DataProperty(:dq))
Declaration(DataProperty(:dr))
Declaration(DataProperty(:ds))
Declaration(AnnotationProperty(:anp))
Declaration(AnnotationProperty(:anq))
Declaration(AnnotationProperty(:anr))
Declaration(AnnotationProperty(:ans))
Declaration(Datatype(:dta))
Declaration(Datatype(:dtb))
Declaration(Datatype(:dtc))


ObjectPropertyAssertion( :rnonsim :d :a)

EquivalentClasses( DataSomeValuesFrom(:dr DataOneOf("s3"^^rdf:PlainLiteral) ) ObjectIntersectionOf(ObjectHasValue(:psim :c) :B DataHasValue(:dq "s2") ObjectOneOf(:b) ObjectSomeValuesFrom(:pnonsim :A) :D :C DataSomeValuesFrom(:dp DataIntersectionOf(xsd:string xsd:string rdf:PlainLiteral ) ) :B DataSomeValuesFrom(:ds rdfs:Literal) DataSomeValuesFrom(:dq DataIntersectionOf(rdfs:Literal DataOneOf("s4")  xsd:string ) ) ObjectSomeValuesFrom(:qnonsim ObjectHasValue(:rsim :c)) ObjectSomeValuesFrom(:snonsim :A) :D ) ObjectHasSelf(:ssim) )

ObjectPropertyAssertion(Annotation(Annotation( :ans :annotation1)  :anq :annotation1)  :qsim :c :d)

DisjointClasses( :B :A )

FunctionalDataProperty( :dr)

HasKey( :B ( :qnonsim  ) ( ) )

EquivalentObjectProperties( :psim :qnonsim )

SameIndividual( :c :a ) 
)
