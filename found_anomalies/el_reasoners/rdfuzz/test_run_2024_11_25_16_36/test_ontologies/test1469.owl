Prefix(:=<http://www.example.org/reasonerTester#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)

Ontology (

Annotation(Annotation(Annotation( :anr :annotation1) Annotation( :anq :annotation3)  :anr :annotation4) Annotation(Annotation( :ans :annotation3)  :anp :annotation1) Annotation( :anq :annotation4) Annotation( :anq :annotation2)  :ans :annotation3) 
Declaration(Class(:A))
Declaration(Class(:B))
Declaration(Class(:C))
Declaration(Class(:D))
Declaration(NamedIndividual(:a))
Declaration(NamedIndividual(:b))
Declaration(NamedIndividual(:c))
Declaration(NamedIndividual(:d))
Declaration(ObjectProperty(:psim))
Declaration(ObjectProperty(:qsim))
Declaration(ObjectProperty(:rsim))
Declaration(ObjectProperty(:ssim))
Declaration(ObjectProperty(:pnonsim))
Declaration(ObjectProperty(:qnonsim))
Declaration(ObjectProperty(:rnonsim))
Declaration(ObjectProperty(:snonsim))
Declaration(DataProperty(:dp))
Declaration(DataProperty(:dq))
Declaration(DataProperty(:dr))
Declaration(DataProperty(:ds))
Declaration(AnnotationProperty(:anp))
Declaration(AnnotationProperty(:anq))
Declaration(AnnotationProperty(:anr))
Declaration(AnnotationProperty(:ans))
Declaration(Datatype(:dta))
Declaration(Datatype(:dtb))
Declaration(Datatype(:dtc))


DisjointClasses( DataSomeValuesFrom(:dq DataOneOf("s4"^^rdf:PlainLiteral) ) ObjectOneOf(:b) ObjectIntersectionOf(ObjectHasValue(:psim :a) ObjectSomeValuesFrom(:snonsim ObjectHasSelf(:ssim)) :A DataHasValue(:dr "s2") :C :D :B ObjectHasValue(:qnonsim :c) ObjectHasValue(:rnonsim :d) DataSomeValuesFrom(:ds rdfs:Literal) DataSomeValuesFrom(:dp DataIntersectionOf(xsd:string xsd:string DataIntersectionOf(xsd:string rdfs:Literal )  ) ) ObjectSomeValuesFrom(:rsim ObjectSomeValuesFrom(:qsim :A)) DataSomeValuesFrom(:ds rdfs:Literal) ObjectSomeValuesFrom(:pnonsim :A) :D ) )

ObjectPropertyAssertion( :rsim :c :b)

ObjectPropertyAssertion( :pnonsim :c :d)

ClassAssertion( :A :b)

EquivalentClasses( :A :C )

TransitiveObjectProperty( :snonsim)

ReflexiveObjectProperty( :rsim)

FunctionalDataProperty( :dr)

ReflexiveObjectProperty( :pnonsim)

FunctionalDataProperty( :dp)

ReflexiveObjectProperty( :ssim) 
)
