Prefix(:=<http://www.example.org/reasonerTester#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)

Ontology (

Annotation(Annotation(Annotation( :anp :annotation3) Annotation( :anq :annotation2) Annotation( :ans :annotation1)  :anr :annotation4) Annotation( :anq :annotation2) Annotation( :anp :annotation3)  :ans :annotation1) 
Declaration(Class(:A))
Declaration(Class(:B))
Declaration(Class(:C))
Declaration(Class(:D))
Declaration(NamedIndividual(:a))
Declaration(NamedIndividual(:b))
Declaration(NamedIndividual(:c))
Declaration(NamedIndividual(:d))
Declaration(ObjectProperty(:psim))
Declaration(ObjectProperty(:qsim))
Declaration(ObjectProperty(:rsim))
Declaration(ObjectProperty(:ssim))
Declaration(ObjectProperty(:pnonsim))
Declaration(ObjectProperty(:qnonsim))
Declaration(ObjectProperty(:rnonsim))
Declaration(ObjectProperty(:snonsim))
Declaration(DataProperty(:dp))
Declaration(DataProperty(:dq))
Declaration(DataProperty(:dr))
Declaration(DataProperty(:ds))
Declaration(AnnotationProperty(:anp))
Declaration(AnnotationProperty(:anq))
Declaration(AnnotationProperty(:anr))
Declaration(AnnotationProperty(:ans))
Declaration(Datatype(:dta))
Declaration(Datatype(:dtb))
Declaration(Datatype(:dtc))


EquivalentClasses( ObjectIntersectionOf(DataHasValue(:dp "s2"^^rdfs:Literal) ObjectSomeValuesFrom(:qnonsim ObjectOneOf(:b)) ObjectHasSelf(:ssim) :C :D DataSomeValuesFrom(:dr DataIntersectionOf(xsd:string DataOneOf("s1")  DataOneOf("s4")  ) ) :A :B ObjectOneOf(:a) ObjectHasValue(:pnonsim :c) ObjectHasValue(:qsim :b) ObjectSomeValuesFrom(:rnonsim ObjectHasValue(:rsim :d)) ObjectHasValue(:snonsim :c) ObjectHasValue(:qsim :a) DataSomeValuesFrom(:dq DataOneOf("s4"^^rdfs:Literal) ) DataSomeValuesFrom(:ds rdf:PlainLiteral) DataHasValue(:dp "s3") DataSomeValuesFrom(:ds rdfs:Literal) DataSomeValuesFrom(:dp rdfs:Literal) :D ) ObjectHasValue(:psim :d) )

ObjectPropertyAssertion( :rnonsim :d :b)

NegativeDataPropertyAssertion( :dr :d "s4")

FunctionalDataProperty( :dp)

HasKey( :D ( :psim  ) ( :ds  ) )

ClassAssertion( :C :c)

ReflexiveObjectProperty( :pnonsim)

TransitiveObjectProperty( :qnonsim)

ReflexiveObjectProperty( :pnonsim)

TransitiveObjectProperty( :qnonsim)

FunctionalDataProperty( :dq) 
)
