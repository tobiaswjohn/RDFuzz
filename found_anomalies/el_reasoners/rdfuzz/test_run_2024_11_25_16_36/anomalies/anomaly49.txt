Found anomalies while testing file ../found_anomalies/el_reasoners/rdfuzz/test_run_2024_11_25_16_36/test_ontologies/test116.owl

Anomaly 1: Inference differentiation between HERMIT and OPENLLET:
	additional axioms HERMIT: [SubObjectPropertyOf(<http://www.example.org/reasonerTester#rsim> <http://www.example.org/reasonerTester#ssim>)]
	additional axioms OPENLLET: [SubObjectPropertyOf(<http://www.example.org/reasonerTester#rsim> owl:topObjectProperty)]

Anomaly 2: Inference differentiation between HERMIT and ELK:
	additional axioms HERMIT: [DisjointClasses(<http://www.example.org/reasonerTester#C> owl:Nothing), SubDataPropertyOf(<http://www.example.org/reasonerTester#dr> owl:topDataProperty), DisjointClasses(<http://www.example.org/reasonerTester#A> owl:Nothing), SubObjectPropertyOf(<http://www.example.org/reasonerTester#rsim> <http://www.example.org/reasonerTester#ssim>), DisjointClasses(<http://www.example.org/reasonerTester#B> owl:Nothing), ObjectPropertyAssertion(<http://www.example.org/reasonerTester#rnonsim> <http://www.example.org/reasonerTester#a> <http://www.example.org/reasonerTester#c>), DisjointClasses(<http://www.example.org/reasonerTester#D> owl:Nothing), SubDataPropertyOf(<http://www.example.org/reasonerTester#dq> owl:topDataProperty), SubDataPropertyOf(<http://www.example.org/reasonerTester#ds> <http://www.example.org/reasonerTester#dq>), SubDataPropertyOf(<http://www.example.org/reasonerTester#dp> owl:topDataProperty)]
	additional axioms ELK: [SubObjectPropertyOf(<http://www.example.org/reasonerTester#rsim> owl:topObjectProperty)]


––––––––––––––––––––––––––––––––––––––––––––
–––––––––––    Ontology File    ––––––––––––
––––––––––––––––––––––––––––––––––––––––––––

Prefix(:=<http://www.example.org/reasonerTester#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)

Ontology (


Declaration(Class(:A))
Declaration(Class(:B))
Declaration(Class(:C))
Declaration(Class(:D))
Declaration(NamedIndividual(:a))
Declaration(NamedIndividual(:b))
Declaration(NamedIndividual(:c))
Declaration(NamedIndividual(:d))
Declaration(ObjectProperty(:psim))
Declaration(ObjectProperty(:qsim))
Declaration(ObjectProperty(:rsim))
Declaration(ObjectProperty(:ssim))
Declaration(ObjectProperty(:pnonsim))
Declaration(ObjectProperty(:qnonsim))
Declaration(ObjectProperty(:rnonsim))
Declaration(ObjectProperty(:snonsim))
Declaration(DataProperty(:dp))
Declaration(DataProperty(:dq))
Declaration(DataProperty(:dr))
Declaration(DataProperty(:ds))
Declaration(AnnotationProperty(:anp))
Declaration(AnnotationProperty(:anq))
Declaration(AnnotationProperty(:anr))
Declaration(AnnotationProperty(:ans))
Declaration(Datatype(:dta))
Declaration(Datatype(:dtb))
Declaration(Datatype(:dtc))


ObjectPropertyAssertion(Annotation( :ans :annotation4) Annotation( :anq :annotation2) Annotation( :anr :annotation1) Annotation( :anr :annotation4) Annotation( :anp :annotation3)  :rnonsim :a :c)

HasKey( ObjectIntersectionOf(:C ObjectHasValue(:ssim :d) ObjectOneOf(:b) ) ( :qsim  ) ( ) )

EquivalentClasses( DataHasValue(:dq "s2"^^rdf:PlainLiteral) ObjectHasSelf(:rsim) ObjectSomeValuesFrom(:qnonsim DataSomeValuesFrom(:dp rdfs:Literal)) :A :B :D DataSomeValuesFrom(:dr DataIntersectionOf(xsd:string DataOneOf("s3")  ) ) DataSomeValuesFrom(:ds rdfs:Literal) :B DataHasValue(:dp "s1") ObjectHasValue(:pnonsim :a) ObjectHasValue(:snonsim :c) ObjectHasValue(:psim :c) ObjectSomeValuesFrom(:qsim DataHasValue(:dp "s4")) ObjectHasSelf(:ssim) DataHasValue(:dq "s1") DataSomeValuesFrom(:dr DataIntersectionOf(DataIntersectionOf(rdf:PlainLiteral rdfs:Literal )  xsd:string rdfs:Literal xsd:string ) ) :D DataSomeValuesFrom(:ds rdfs:Literal) )

SubDataPropertyOf( :ds :dq)

DisjointClasses( ObjectIntersectionOf(ObjectIntersectionOf(DataSomeValuesFrom(:dp DataIntersectionOf(DataIntersectionOf(DataIntersectionOf(xsd:string rdfs:Literal )  DataOneOf("s2")  DataOneOf("s1")  )  DataIntersectionOf(DataIntersectionOf(xsd:string DataOneOf("s3"^^xsd:string)  )  xsd:string DataOneOf("s4")  )  ) ) ObjectIntersectionOf(:B ObjectHasValue(:qsim :b) ) ) ObjectOneOf(:a) ObjectHasValue(:qnonsim :d) DataHasValue(:dp "s4") ) ObjectHasValue(:qnonsim :b) ObjectOneOf(:a) ObjectOneOf(:b) ) 
)
