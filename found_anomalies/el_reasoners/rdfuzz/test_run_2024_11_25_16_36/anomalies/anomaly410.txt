Found anomalies while testing file ../found_anomalies/el_reasoners/rdfuzz/test_run_2024_11_25_16_36/test_ontologies/test953.owl

Anomaly 1: Anomaly: not in EL
 Not enough operands; at least two needed: DataIntersectionOf(rdf:PlainLiteral) [DisjointClasses(<http://www.example.org/reasonerTester#B> ObjectOneOf(<http://www.example.org/reasonerTester#b>) ObjectOneOf(<http://www.example.org/reasonerTester#c>) ObjectSomeValuesFrom(<http://www.example.org/reasonerTester#qsim> <http://www.example.org/reasonerTester#B>) ObjectHasValue(<http://www.example.org/reasonerTester#qnonsim> <http://www.example.org/reasonerTester#d>) ObjectHasValue(<http://www.example.org/reasonerTester#rsim> <http://www.example.org/reasonerTester#a>) ObjectHasSelf(<http://www.example.org/reasonerTester#ssim>) DataSomeValuesFrom(<http://www.example.org/reasonerTester#dq> DataOneOf("s4"^^xsd:string)) DataSomeValuesFrom(<http://www.example.org/reasonerTester#dq> DataIntersectionOf(rdf:PlainLiteral)) DataSomeValuesFrom(<http://www.example.org/reasonerTester#dq> DataIntersectionOf(rdf:PlainLiteral rdfs:Literal)) DataSomeValuesFrom(<http://www.example.org/reasonerTester#ds> rdfs:Literal)) in OntologyID(Anonymous-3)]



––––––––––––––––––––––––––––––––––––––––––––
–––––––––––    Ontology File    ––––––––––––
––––––––––––––––––––––––––––––––––––––––––––

Prefix(:=<http://www.example.org/reasonerTester#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)

Ontology (


Declaration(Class(:A))
Declaration(Class(:B))
Declaration(Class(:C))
Declaration(Class(:D))
Declaration(NamedIndividual(:a))
Declaration(NamedIndividual(:b))
Declaration(NamedIndividual(:c))
Declaration(NamedIndividual(:d))
Declaration(ObjectProperty(:psim))
Declaration(ObjectProperty(:qsim))
Declaration(ObjectProperty(:rsim))
Declaration(ObjectProperty(:ssim))
Declaration(ObjectProperty(:pnonsim))
Declaration(ObjectProperty(:qnonsim))
Declaration(ObjectProperty(:rnonsim))
Declaration(ObjectProperty(:snonsim))
Declaration(DataProperty(:dp))
Declaration(DataProperty(:dq))
Declaration(DataProperty(:dr))
Declaration(DataProperty(:ds))
Declaration(AnnotationProperty(:anp))
Declaration(AnnotationProperty(:anq))
Declaration(AnnotationProperty(:anr))
Declaration(AnnotationProperty(:ans))
Declaration(Datatype(:dta))
Declaration(Datatype(:dtb))
Declaration(Datatype(:dtc))


FunctionalDataProperty(Annotation(Annotation( :anq :annotation4) Annotation( :anr :annotation2)  :ans :annotation3) Annotation(Annotation( :anq :annotation1)  :anp :annotation1) Annotation( :anr :annotation2) Annotation( :anq :annotation4)  :dp)

EquivalentClasses(Annotation( :ans :annotation1)  ObjectSomeValuesFrom(:pnonsim ObjectIntersectionOf(:D :C )) :A DataHasValue(:dr "s3"^^xsd:string) )

DisjointClasses( ObjectOneOf(:c) ObjectHasValue(:rsim :a) DataSomeValuesFrom(:dq DataOneOf("s4") ) :B ObjectHasSelf(:ssim) ObjectHasValue(:qnonsim :d) ObjectOneOf(:b) DataSomeValuesFrom(:ds rdfs:Literal) DataSomeValuesFrom(:dq DataIntersectionOf(rdfs:Literal rdf:PlainLiteral rdfs:Literal ) ) DataSomeValuesFrom(:dq DataIntersectionOf(rdf:PlainLiteral rdf:PlainLiteral ) ) ObjectSomeValuesFrom(:qsim :B) )

HasKey( ObjectSomeValuesFrom(:psim ObjectHasValue(:rnonsim :b)) ( :snonsim  ) ( :dr  ) )

ReflexiveObjectProperty(Annotation(Annotation( :anq :annotation4)  :anp :annotation4)  :rsim)

SameIndividual(Annotation( :anp :annotation4) Annotation( :ans :annotation4) Annotation( :anr :annotation3)  :d :a )

ObjectPropertyAssertion( :qnonsim :a :c)

ObjectPropertyDomain( :rsim DataHasValue(:dq "s2"))

DataPropertyRange(Annotation(Annotation( :anq :annotation2)  :anq :annotation4) Annotation( :anp :annotation4)  :dp DataOneOf("s1") )

TransitiveObjectProperty(Annotation(Annotation( :anp :annotation2)  :anp :annotation3) Annotation(Annotation( :anq :annotation2)  :anq :annotation1)  :qnonsim)

SubObjectPropertyOf(Annotation( :ans :annotation2)  ObjectPropertyChain(:ssim :ssim :snonsim :snonsim :snonsim :psim :pnonsim ) :qnonsim) 
)
